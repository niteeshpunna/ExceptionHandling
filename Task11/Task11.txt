Java Exception and Error Handling
1.	Access modifiers in Java. 

There are two types of modifiers in Java: access modifiers and non-access modifiers.

The access modifiers in Java specify the accessibility or scope of a field, method, constructor, or class. We can change the access level of fields, constructors, methods, and class by applying the access modifier on it.

There are four types of Java access modifiers:

Public: The access level of a public modifier is everywhere. It can be accessed from within the class, outside the class, within the package and outside the package. The main purpose of this access modifier is re-usability of the method/ class. This will reduce code duplication hence code errors also.

class guvi 
{
    public void method1() {...} 
	// method1 is public, can be accessed by any other class
}

Private: The access level of a private modifier is only within the class. It cannot be accessed from outside the class. This will secure the data being used by others. Especially in the banking sector, Data management. 

class guvi 
{
 private void method2() {...}
	// method2 is private, cannot be accessed by any other class
}

Default: If you don't use any modifier, it is treated as default by default. The default modifier is accessible only within the package. It cannot be accessed from outside the package. It provides more accessibility than private. But, it is more restrictive than protected, and public.

Protected: The access level of a protected modifier is within the package and outside the package through child class through inheritance only. If you do not make the child class, it cannot be accessed from outside the package.

 ---------------------------------------------------------------------------------------------------------------------

2.	Differences between exception and error: 
Exceptions and errors both are subclasses of the Throwable class. The error indicates a problem that mainly occurs due to the lack of system resources and our application would not catch these types of problems. Some of the examples of errors are system crash error and out of memory error. Errors mostly occur at runtime that's they belong to an unchecked type. 

Exceptions are the problems which can occur at runtime and compile time. It mainly occurs in the code written by the developers. Exceptions are divided into two categories such as checked exceptions and unchecked exceptions. 

S.No	Description 					Error									Exception
1		Type 							Classified as an unchecked type		Classified as checked and unchecked 
2		Package							It belongs to java.lang.error		It belongs to java.lang.Exception
3		Recoverable/ Irrecoverable		It is irrecoverable					It is recoverable
4										It can't be occur at compile time 	It can occur at run time compile time both
5		Example							OutOfMemoryError ,IOError			NullPointerException , SqlException 

----------------------------------------------------------------------------------------------------------------------------

3.	Differences between Checked exception and Unchecked exception
In Java programming, for every occurrence of an exception, there generates an exception object, which holds all the details of the exception. Then the program searches for its respective exception handler. If found, the exception is handled or resolved, or else the program execution stops.

Java generates two types of exceptions. These are:

Checked exception
Unchecked exception

	Checked exception															Unchecked exception
Checked exceptions occur at compile time.									Unchecked exceptions occur at runtime.
The compiler checks a checked exception.									he compiler does not check these types of exceptions.
These types of exceptions can be handled at the time of compilation.		These types of exceptions cannot be a catch or handle at the time of compilation, because they get generated by the mistakes in the program.
They are the sub-class of the exception class.								They are runtime exceptions and hence are not a part of the Exception class.
Here, the JVM needs the exception to catch and handle.						Here, the JVM does not require the exception to catch and handle.
Examples of Checked exceptions:
●	File Not Found Exception
●	No Such Field Exception
●	Interrupted Exception
●	No Such Method Exception
●	Class Not Found Exception	


Examples of Unchecked Exceptions:
●	No Such Element Exception
●	Undeclared Throwable Exception
●	Empty Stack Exception
●	Arithmetic Exception
●	Null Pointer Exception
●	Array Index Out of Bounds Exception
●	Security Exception


-----------------------------------------------------------------------------------------------------------------------

4.	Write a Java program that reads user input for twO integers and performs division. Handle the exception that is thrown when the second number is zero, and display an error message to the user.

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        
        Scanner obj = new Scanner(System.in);
        int a = obj.nextInt();
        int b = obj.nextInt();
        
                System.out.println(a/b);
      }
}

Input: 5 0 
Output: 
Exception in thread "main" java.lang.ArithmeticException: / by zero
	at Main.main(Main.java:10)

To handle this exception we use try- catch exception handling 

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        
        Scanner obj = new Scanner(System.in);
        int a = obj.nextInt();
        int b = obj.nextInt();
        
        try {
            System.out.println(a/b);
        }
        catch (ArithmeticException e)
        {
            System.out.println("Denominator cannot be zero");
        }
    }
}

Input: 5 0 
Output: Denominator cannot be zero (First it will execute try block if exception arises then catch block will be executed)

---------------------------------------------------------------------------------------------------------------------------------

5.	Write the code of ArrayIndexOutOfBoundsException & StringindexOutOfBoundsException?
ArrayIndexOutOfBoundExceptions

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3};
        try {
            // Accessing an index that is out of bounds
            int value = numbers[3];
            System.out.println("Value: " + value); // This line will not execute
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Array index is out of bounds.");
        }
    }
}
Output: 
The code uses a try-catch block to catch the exception. If an exception occurs, the program jumps to the catch block where the exception is handled. In this case, we simply print a message indicating that the array index is out of bounds 

StringIndexOutOfBoundsException
import java.util.Scanner;
public class Main{

public static void main(String[] args) {
        String str = "Hello, World!";
        
            System.out.println(str.charAt(15));

        try {
            // Accessing an index that is out of bounds
            char ch = str.charAt(15);
            System.out.println("Character: " + ch); // This line will not execute
        } catch (StringIndexOutOfBoundsException e) {
            System.out.println("String index is out of bounds.");
        }
    }
}
In the above code, we have a String variable str initialized with the value "Hello, World!” Inside the try block, we attempt to access the character at index 15, which is beyond the valid range of the string. As a result, a StringIndexOutOfBoundsException is thrown.

------------------------------------------------------------------------------------------------------------------------


6.	You are building a login system for a website using Java. If the user enters an incorrect password, you want to display a message informing them of the error. How would you use exception handling to handle this situation?

When we compare the entered password with the actual password. If they don't match, we explicitly throw a custom exception with an appropriate error message.

Within the try block, if the passwords don't match, the throw statement throws an instance of Custom Exception with the specified error message. The program then jumps to the catch block where the exception is caught, and we can handle it appropriately. In this case, we simply print the error message. 


------------------------------------------------------------------------------------------------------------------------------------------------

7.	Create a custom exception in Java called "InvalidAgeException" that is thrown when the user enters an age less than 18. Implement exception handlıng in a Java program to catch the "InvalidAgeException" and display an error message.

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int age = 15;

        try {
            if (age < 18) {
                throw new InvalidAgeException("Age must be 18 or above.");
            }
            System.out.println("Access granted!"); // This line will not execute if age is less than 18
        } catch (InvalidAgeException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}

class InvalidAgeException extends Exception {
    public InvalidAgeException(String message) {
        super(message);
    }
}
Input: age is 15. 
Output: Age must be 18 or above

Input: age is 20
Output: Access granted!
The InvalidAgeException class extends the Exception class, allowing us to create a custom exception for handling invalid age values. It accepts a message as a parameter, which is passed to the superclass constructor using super (message).

Within the try block, if the age is less than 18, the throw statement throws an instance of InvalidAgeException with the specified error message. The program then jumps to the catch block where the exception is caught, and we can handle it appropriately. In this case, we simply print the error message using e.getMessage().

------------------------------------------------------------------------------------------------------------------------------------------------

8.	Implement exception handling in a Java program that reads data from a file. If the file does not exist, throw a "FileNotFoundException" and display an error message to the user.

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        String filePath = "Task11.txt";

        try {
            File file = new File(filePath);
            Scanner scanner = new Scanner(file);
            // Perform file reading operations here
            System.out.println("File reading successful!");
            scanner.close();
        } catch (FileNotFoundException e) {
            System.out.println("Error: File not found. " +e.getMessage());
            //e.printStackTrace();
            
        }
    }
}
Output: 
Error: File not found. Task11.txt (No such file or directory)

If the file does not exist, the File constructor throws a FileNotFoundException. This exception is caught in the catch block, and we display an error message indicating that the file was not found using System.out.println(). Additionally, we print the message of the exception using e.getMessage() to provide more information about the exception.



  

